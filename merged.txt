
/* File: ./eslint.config.js */
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]


/* File: ./vite.config.js */
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
  plugins: [
    react(),
    tailwindcss()
  ],
  test: {
    environment: 'jsdom',
    setupFiles: ['src/tests/setupTests.js', 'src/tests/matchMedia.js'],
    globals: true,
    coverage: {
      reporter: ['text', 'lcov']
    }
  }
})

/* File: ./src\App.css */


/* File: ./src\App.jsx */
import { BrowserRouter as Router, Routes, Route, Link } from "react-router-dom";
import Home from "./pages/Home";
import CountryDetail from "./pages/CountryDetail";
import Favorites from "./pages/Favorites";
import ThemeToggle from "./components/ThemeToggle";
import Auth from "./components/Auth";
import { AuthProvider } from "./utils/AuthContext";
import { ThemeProvider, useTheme } from "./utils/ThemeContext";
import { Toaster } from 'react-hot-toast';

function App() {
  const { theme } = useTheme();

  return (
    <div className={`min-h-screen ${theme === "light" ? "bg-gray-50" : "bg-gray-900"}`}>
      <Toaster
        position="top-right"
        toastOptions={{
          className: theme === "light" ? "bg-white" : "bg-gray-800",
          style: {
            background: theme === "light" ? "#fff" : "#1f2937",
            color: theme === "light" ? "#1f2937" : "#fff",
          },
        }}
      />
      <nav className={`p-4 shadow-md ${theme === "light" ? "bg-white" : "bg-gray-800"} flex justify-between items-center sticky top-0 z-50`}>
        <div className="flex gap-4 items-center">
          <Link
            to="/"
            className={`p-2 rounded-md transition-all duration-200 ${
              theme === "light" 
                ? "bg-blue-50 text-blue-600 hover:bg-blue-100" 
                : "bg-blue-900 text-blue-100 hover:bg-blue-800"
            }`}
          >
            Home
          </Link>
          <Link
            to="/favorites"
            className={`p-2 rounded-md transition-all duration-200 ${
              theme === "light" 
                ? "bg-blue-50 text-blue-600 hover:bg-blue-100" 
                : "bg-blue-900 text-blue-100 hover:bg-blue-800"
            }`}
          >
            Favorites
          </Link>
        </div>
        <div className="flex gap-4 items-center">
          <ThemeToggle />
          <Auth />
        </div>
      </nav>
      <main className="container mx-auto px-4 py-8">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/country/:code" element={<CountryDetail />} />
          <Route path="/favorites" element={<Favorites />} />
        </Routes>
      </main>
    </div>
  );
}

export default function RootApp() {
  return (
    <ThemeProvider>
      <AuthProvider>
        <Router>
          <App />
        </Router>
      </AuthProvider>
    </ThemeProvider>
  );
}

/* File: ./src\index.css */
@import "tailwindcss";

/* File: ./src\main.jsx */
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


/* File: ./src\components\Auth.jsx */
import { useState } from "react";
import { signOut } from "firebase/auth";
import { auth } from "../utils/firebase";
import { useAuth } from "../utils/AuthContext";
import AuthModal from "./AuthModal";
import { useTheme } from "../utils/ThemeContext";
import { motion } from "framer-motion";
import toast from "react-hot-toast";

const Auth = () => {
  const { user } = useAuth();
  const { theme } = useTheme();
  const [isModalOpen, setIsModalOpen] = useState(false);

  const handleSignOut = async () => {
    try {
      await signOut(auth);
      toast.success("Signed out successfully!");
    } catch (error) {
      toast.error("Error signing out. Please try again.");
      console.error("Sign-out error:", error);
    }
  };

  return (
    <>
      {user ? (
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          className="flex items-center gap-4"
        >
          <span className={`${theme === "light" ? "text-gray-800" : "text-white"}`}>
            {user.email}
          </span>
          <motion.button
            onClick={handleSignOut}
            className={`p-2 rounded-lg transition-all duration-300 ${
              theme === "light"
                ? "bg-red-50 text-red-600 hover:bg-red-100"
                : "bg-red-900 text-red-100 hover:bg-red-800"
            }`}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            aria-label="Sign out"
          >
            Sign Out
          </motion.button>
        </motion.div>
      ) : (
        <motion.button
          onClick={() => setIsModalOpen(true)}
          className={`p-2 rounded-lg transition-all duration-300 ${
            theme === "light"
              ? "bg-blue-50 text-blue-600 hover:bg-blue-100"
              : "bg-blue-900 text-blue-100 hover:bg-blue-800"
          }`}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          aria-label="Sign in"
        >
          Sign In
        </motion.button>
      )}
      <AuthModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} />
    </>
  );
};

export default Auth;

/* File: ./src\components\AuthModal.jsx */
import { useState } from "react";
import { signInWithEmailAndPassword, createUserWithEmailAndPassword } from "firebase/auth";
import { auth } from "../utils/firebase";
import { useTheme } from "../utils/ThemeContext";
import { motion, AnimatePresence } from "framer-motion";
import toast from "react-hot-toast";

const AuthModal = ({ isOpen, onClose }) => {
  const { theme } = useTheme();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isSignUp, setIsSignUp] = useState(false);
  const [error, setError] = useState("");

  if (!isOpen) return null;

  const handleAuth = async (e) => {
    e.preventDefault();
    setError("");
    try {
      if (isSignUp) {
        await createUserWithEmailAndPassword(auth, email, password);
        toast.success("Account created successfully!");
      } else {
        await signInWithEmailAndPassword(auth, email, password);
        toast.success("Signed in successfully!");
      }
      onClose();
    } catch (err) {
      setError(err.message);
      toast.error(err.message);
    }
  };

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
        onClick={onClose}
      >
        <motion.div
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.9, opacity: 0 }}
          className={`p-8 rounded-xl shadow-2xl w-full max-w-md ${
            theme === "light" ? "bg-white" : "bg-gray-800"
          }`}
          onClick={(e) => e.stopPropagation()}
        >
          <h2 className={`text-2xl font-bold mb-6 ${theme === "light" ? "text-gray-800" : "text-white"}`}>
            {isSignUp ? "Create Account" : "Welcome Back"}
          </h2>
          <form onSubmit={handleAuth} className="space-y-4">
            <div>
              <label className={`block text-sm font-medium mb-2 ${theme === "light" ? "text-gray-700" : "text-gray-300"}`}>
                Email
              </label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Enter your email"
                className={`w-full p-3 rounded-lg transition-all duration-300 ${
                  theme === "light"
                    ? "bg-gray-50 text-gray-800 border-gray-200 focus:border-blue-500"
                    : "bg-gray-700 text-white border-gray-600 focus:border-blue-400"
                } focus:outline-none focus:ring-2 focus:ring-blue-500/20`}
                aria-label="Email"
              />
            </div>
            <div>
              <label className={`block text-sm font-medium mb-2 ${theme === "light" ? "text-gray-700" : "text-gray-300"}`}>
                Password
              </label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Enter your password"
                className={`w-full p-3 rounded-lg transition-all duration-300 ${
                  theme === "light"
                    ? "bg-gray-50 text-gray-800 border-gray-200 focus:border-blue-500"
                    : "bg-gray-700 text-white border-gray-600 focus:border-blue-400"
                } focus:outline-none focus:ring-2 focus:ring-blue-500/20`}
                aria-label="Password"
              />
            </div>
            {error && (
              <motion.p
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-red-500 text-sm"
              >
                {error}
              </motion.p>
            )}
            <motion.button
              type="submit"
              className="w-full p-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-300"
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              {isSignUp ? "Create Account" : "Sign In"}
            </motion.button>
          </form>
          <div className="mt-6 text-center">
            <button
              onClick={() => setIsSignUp(!isSignUp)}
              className={`text-sm ${
                theme === "light" ? "text-blue-600 hover:text-blue-700" : "text-blue-400 hover:text-blue-300"
              }`}
            >
              {isSignUp ? "Already have an account? Sign In" : "Need an account? Sign Up"}
            </button>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
};

export default AuthModal;

/* File: ./src\components\CountryCard.jsx */
import { Link } from "react-router-dom";
import { motion } from "framer-motion";
import { useTheme } from "../utils/ThemeContext";

const CountryCard = ({ country }) => {
  const { theme } = useTheme();

  return (
    <Link to={`/country/${country.cca3}`}>
      <motion.div
        className={`border rounded-xl shadow-lg overflow-hidden ${
          theme === "light" 
            ? "bg-white hover:shadow-xl" 
            : "bg-gray-800 hover:shadow-gray-700"
        } transition-all duration-300`}
        whileHover={{ scale: 1.02, y: -5 }}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        <div className="relative">
          <img
            src={country.flags.png}
            alt={`${country.name.common} flag`}
            className="w-full h-48 object-cover"
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-300" />
        </div>
        <div className="p-6">
          <h2 className={`text-xl font-bold mb-3 ${theme === "light" ? "text-gray-800" : "text-white"}`}>
            {country.name.common}
          </h2>
          <div className="space-y-2">
            <p className={`flex items-center gap-2 ${theme === "light" ? "text-gray-600" : "text-gray-300"}`}>
              <span className="font-semibold">Population:</span>
              {country.population.toLocaleString()}
            </p>
            <p className={`flex items-center gap-2 ${theme === "light" ? "text-gray-600" : "text-gray-300"}`}>
              <span className="font-semibold">Region:</span>
              {country.region}
            </p>
            <p className={`flex items-center gap-2 ${theme === "light" ? "text-gray-600" : "text-gray-300"}`}>
              <span className="font-semibold">Capital:</span>
              {country.capital?.[0] || "N/A"}
            </p>
          </div>
        </div>
      </motion.div>
    </Link>
  );
};

export default CountryCard;

/* File: ./src\components\PopulationChart.jsx */
import { Bar } from "react-chartjs-2";
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from "chart.js";
import { useTheme } from "../utils/ThemeContext";

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const PopulationChart = ({ countries }) => {
  const { theme } = useTheme();

  const data = {
    labels: countries.slice(0, 5).map((c) => c.name.common),
    datasets: [
      {
        label: "Population",
        data: countries.slice(0, 5).map((c) => c.population),
        backgroundColor: "rgba(75, 192, 192, 0.6)",
      },
    ],
  };

  const options = {
    plugins: {
      legend: {
        labels: {
          color: theme === "light" ? "rgb(31, 41, 55)" : "rgb(209, 213, 219)", // gray-800 : gray-300
        },
      },
      title: {
        color: theme === "light" ? "rgb(31, 41, 55)" : "rgb(209, 213, 219)", // gray-800 : gray-300
      },
      tooltip: {
        titleColor: "rgb(255, 255, 255)", // white
        bodyColor: "rgb(255, 255, 255)", // white
      },
    },
    scales: {
      x: {
        ticks: {
          color: theme === "light" ? "rgb(31, 41, 55)" : "rgb(209, 213, 219)", // gray-800 : gray-300
        },
      },
      y: {
        ticks: {
          color: theme === "light" ? "rgb(31, 41, 55)" : "rgb(209, 213, 219)", // gray-800 : gray-300
        },
      },
    },
  };

  return (
    <div className={`my-8 p-4 rounded-lg shadow-md ${theme === "light" ? "bg-white" : "bg-gray-800"}`}>
      <h2 className={`text-2xl font-bold mb-4 ${theme === "light" ? "text-gray-800" : "text-white"}`}>Top 5 Countries by Population</h2>
      <Bar data={data} options={options} />
    </div>
  );
};

export default PopulationChart;

/* File: ./src\components\RegionFilter.jsx */
import { useState } from "react";
import { filterCountriesByRegion, fetchAllCountries } from "../utils/api";
import { useTheme } from "../utils/ThemeContext";
import { motion } from "framer-motion";

const regions = ["Africa", "Americas", "Asia", "Europe", "Oceania"];

const RegionFilter = ({ setFilteredCountries }) => {
  const { theme } = useTheme();
  const [selectedRegion, setSelectedRegion] = useState("");

  const handleRegionChange = async (e) => {
    const region = e.target.value;
    setSelectedRegion(region);
    try {
      if (region) {
        const data = await filterCountriesByRegion(region);
        setFilteredCountries(data);
      } else {
        const allCountries = await fetchAllCountries();
        setFilteredCountries(allCountries);
      }
    } catch (error) {
      setFilteredCountries([]);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3, delay: 0.1 }}
      className="relative"
    >
      <select
        value={selectedRegion}
        onChange={handleRegionChange}
        className={`p-4 pr-10 rounded-lg shadow-md appearance-none cursor-pointer transition-all duration-300 ${
          theme === "light"
            ? "bg-white text-gray-800 border-gray-200 focus:border-blue-500"
            : "bg-gray-800 text-white border-gray-700 focus:border-blue-400"
        } focus:outline-none focus:ring-2 focus:ring-blue-500/20`}
        aria-label="Filter by region"
      >
        <option value="">Filter by Region</option>
        {regions.map((region) => (
          <option key={region} value={region}>
            {region}
          </option>
        ))}
      </select>
      <div className={`absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none ${
        theme === "light" ? "text-gray-400" : "text-gray-500"
      }`}>
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M19 9l-7 7-7-7"
          />
        </svg>
      </div>
    </motion.div>
  );
};

export default RegionFilter;

/* File: ./src\components\SearchBar.jsx */
import { useState, useEffect } from "react";
import { searchCountriesByName, fetchAllCountries } from "../utils/api";
import { useTheme } from "../utils/ThemeContext";
import { motion } from "framer-motion";

const SearchBar = ({ setFilteredCountries }) => {
  const { theme } = useTheme();
  const [query, setQuery] = useState("");

  useEffect(() => {
    const debounceSearch = setTimeout(async () => {
      try {
        if (query.trim()) {
          const data = await searchCountriesByName(query);
          setFilteredCountries(data);
        } else {
          const allCountries = await fetchAllCountries();
          setFilteredCountries(allCountries);
        }
      } catch (error) {
        setFilteredCountries([]);
      }
    }, 500);

    return () => clearTimeout(debounceSearch);
  }, [query, setFilteredCountries]);

  const handleSearch = (e) => {
    setQuery(e.target.value);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      className="relative w-full md:w-1/2"
    >
      <input
        type="text"
        value={query}
        onChange={handleSearch}
        placeholder="Search for a country..."
        className={`w-full p-4 pl-12 rounded-lg shadow-md transition-all duration-300 ${
          theme === "light"
            ? "bg-white text-gray-800 border-gray-200 focus:border-blue-500"
            : "bg-gray-800 text-white border-gray-700 focus:border-blue-400"
        } focus:outline-none focus:ring-2 focus:ring-blue-500/20`}
        aria-label="Search countries"
      />
      <svg
        className={`absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 ${
          theme === "light" ? "text-gray-400" : "text-gray-500"
        }`}
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
        />
      </svg>
    </motion.div>
  );
};

export default SearchBar;

/* File: ./src\components\ThemeToggle.jsx */
import { useTheme } from "../utils/ThemeContext";
import { motion } from "framer-motion";

const ThemeToggle = () => {
  const { theme, toggleTheme } = useTheme();

  return (
    <motion.button
      onClick={toggleTheme}
      className={`p-2 rounded-lg transition-all duration-300 ${
        theme === "light"
          ? "bg-gray-100 text-gray-800 hover:bg-gray-200"
          : "bg-gray-700 text-white hover:bg-gray-600"
      }`}
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      aria-label="Toggle theme"
    >
      {theme === "light" ? (
        <svg
          className="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
          />
        </svg>
      ) : (
        <svg
          className="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
          />
        </svg>
      )}
    </motion.button>
  );
};

export default ThemeToggle;

/* File: ./src\pages\CountryDetail.jsx */
import { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";
import { fetchCountryByCode } from "../utils/api";
import { motion } from "framer-motion";
import { useAuth } from "../utils/AuthContext";
import { useTheme } from "../utils/ThemeContext";

const CountryDetail = () => {
  const { theme } = useTheme();
  const { code } = useParams();
  const { user } = useAuth();
  const [country, setCountry] = useState(null);
  const [loading, setLoading] = useState(true);
  const [favorites, setFavorites] = useState(JSON.parse(localStorage.getItem("favorites")) || []);

  const toggleFavorite = () => {
    if (!user) return;
    let updatedFavorites;
    if (favorites.includes(country.cca3)) {
      updatedFavorites = favorites.filter((id) => id !== country.cca3);
    } else {
      updatedFavorites = [...favorites, country.cca3];
    }
    setFavorites(updatedFavorites);
    localStorage.setItem("favorites", JSON.stringify(updatedFavorites));
  };

  useEffect(() => {
    const loadCountry = async () => {
      try {
        const data = await fetchCountryByCode(code);
        setCountry(data);
        localStorage.setItem("lastCountry", JSON.stringify(data));
        setLoading(false);
      } catch (error) {
        setLoading(false);
      }
    };
    loadCountry();
  }, [code]);

  if (loading) return <p className={`text-center ${theme === "light" ? "text-gray-800" : "text-white"}`}>Loading...</p>;
  if (!country) return <p className={`text-center ${theme === "light" ? "text-gray-800" : "text-white"}`}>Country not found.</p>;

  return (
    <motion.div
      className={`container mx-auto p-4 min-h-screen ${theme === "light" ? "bg-white text-gray-800" : "bg-gray-900 text-white"}`}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <Link
        to="/"
        className={`inline-block mb-8 p-2 border rounded-md ${
          theme === "light" ? "bg-gray-200 text-gray-800 hover:bg-gray-300" : "bg-gray-800 text-white hover:bg-gray-700"
        }`}
        aria-label="Back to home"
      >
        Back
      </Link>
      <div className="flex flex-col md:flex-row gap-8">
        <img
          src={country.flags.png}
          alt={`${country.name.common} flag`}
          className="w-full md:w-1/2 h-64 object-cover rounded-lg shadow-md"
        />
        <div className="flex flex-col gap-4">
          <h1 className="text-3xl font-bold">{country.name.common}</h1>
          <p><strong>Capital:</strong> {country.capital?.[0] || "N/A"}</p>
          <p><strong>Population:</strong> {country.population.toLocaleString()}</p>
          <p><strong>Region:</strong> {country.region}</p>
          <p><strong>Languages:</strong> {Object.values(country.languages || {}).join(", ") || "N/A"}</p>
          <p><strong>Currency:</strong> {Object.values(country.currencies || {})[0]?.name || "N/A"}</p>
          <p><strong>Borders:</strong> {country.borders?.join(", ") || "None"}</p>
          {user ? (
            <button
              onClick={toggleFavorite}
              className={`p-2 rounded-md ${favorites.includes(country.cca3) ? "bg-red-500" : "bg-gray-500"} text-white hover:opacity-90`}
              aria-label={favorites.includes(country.cca3) ? "Remove from favorites" : "Add to favorites"}
            >
              {favorites.includes(country.cca3) ? "Remove Favorite" : "Add Favorite"}
            </button>
          ) : (
            <p className="text-red-500">Please sign in to add to favorites.</p>
          )}
        </div>
      </div>
    </motion.div>
  );
};

export default CountryDetail;

/* File: ./src\pages\Favorites.jsx */
import { useState, useEffect } from "react";
import { fetchCountryByCode } from "../utils/api";
import CountryCard from "../components/CountryCard";
import { motion } from "framer-motion";
import { Link } from "react-router-dom";
import { useTheme } from "../utils/ThemeContext";

const Favorites = () => {
  const { theme } = useTheme();
  const [favorites, setFavorites] = useState(JSON.parse(localStorage.getItem("favorites")) || []);
  const [favoriteCountries, setFavoriteCountries] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadFavoriteCountries = async () => {
      try {
        const countryPromises = favorites.map((code) => fetchCountryByCode(code));
        const countries = await Promise.all(countryPromises);
        setFavoriteCountries(countries);
        setLoading(false);
      } catch (error) {
        setLoading(false);
      }
    };
    loadFavoriteCountries();
  }, [favorites]);

  return (
    <div className={`container mx-auto p-4 min-h-screen ${theme === "light" ? "bg-white text-gray-800" : "bg-gray-900 text-white"}`}>
      <Link
        to="/"
        className={`inline-block mb-8 p-2 border rounded-md ${
          theme === "light" ? "bg-gray-200 text-gray-800 hover:bg-gray-300" : "bg-gray-800 text-white hover:bg-gray-700"
        }`}
        aria-label="Back to home"
      >
        Back to Home
      </Link>
      <h1 className="text-3xl font-bold mb-8 text-center">Favorite Countries</h1>
      {loading ? (
        <p className="text-center">Loading...</p>
      ) : favoriteCountries.length === 0 ? (
        <p className="text-center">No favorite countries added.</p>
      ) : (
        <motion.div
          className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          {favoriteCountries.map((country) => (
            <CountryCard key={country.cca3} country={country} />
          ))}
        </motion.div>
      )}
    </div>
  );
};

export default Favorites;

/* File: ./src\pages\Home.jsx */
import { useState, useEffect } from "react";
import { fetchAllCountries } from "../utils/api";
import CountryCard from "../components/CountryCard";
import SearchBar from "../components/SearchBar";
import RegionFilter from "../components/RegionFilter";
import PopulationChart from "../components/PopulationChart";
import { motion } from "framer-motion";
import { useTheme } from "../utils/ThemeContext";

const Home = () => {
  const { theme } = useTheme();
  const [countries, setCountries] = useState([]);
  const [filteredCountries, setFilteredCountries] = useState([]);
  const [loading, setLoading] = useState(true);
  const [sortBy, setSortBy] = useState("name");
  const [showChart, setShowChart] = useState(false);

  const handleSort = (countries) => {
    if (sortBy === "name") {
      return [...countries].sort((a, b) => a.name.common.localeCompare(b.name.common));
    } else if (sortBy === "population") {
      return [...countries].sort((a, b) => b.population - a.population);
    }
    return countries;
  };

  useEffect(() => {
    const loadCountries = async () => {
      try {
        const data = await fetchAllCountries();
        setCountries(data);
        setFilteredCountries(data);
        setLoading(false);
      } catch (error) {
        setLoading(false);
      }
    };
    loadCountries();
  }, []);

  return (
    <div className={`container mx-auto p-4 min-h-screen ${theme === "light" ? "bg-white text-gray-800" : "bg-gray-900 text-white"}`}>
      <h1 className="text-3xl font-bold mb-6 text-center">REST Countries Explorer</h1>
      <div className="flex flex-col md:flex-row justify-between items-center mb-8 gap-4">
        <SearchBar setFilteredCountries={setFilteredCountries} />
        <div className="flex flex-col sm:flex-row gap-4">
          <RegionFilter setFilteredCountries={setFilteredCountries} />
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, delay: 0.2 }}
            className="relative"
          >
            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
              className={`p-4 pr-10 rounded-lg shadow-md appearance-none cursor-pointer transition-all duration-300 ${
                theme === "light"
                  ? "bg-white text-gray-800 border-gray-200 focus:border-blue-500"
                  : "bg-gray-800 text-white border-gray-700 focus:border-blue-400"
              } focus:outline-none focus:ring-2 focus:ring-blue-500/20`}
              aria-label="Sort countries"
            >
              <option value="name">Sort by Name</option>
              <option value="population">Sort by Population</option>
            </select>
            <div className={`absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none ${
              theme === "light" ? "text-gray-400" : "text-gray-500"
            }`}>
              <svg
                className="w-5 h-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M19 9l-7 7-7-7"
                />
              </svg>
            </div>
          </motion.div>
        </div>
      </div>
      <button
        onClick={() => setShowChart(!showChart)}
        className="mb-6 p-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
        aria-label={showChart ? "Hide population chart" : "Show population chart"}
      >
        {showChart ? "Hide Population Chart" : "Show Population Chart"}
      </button>
      {showChart && <PopulationChart countries={filteredCountries} />}
      {loading ? (
        <p className="text-center">Loading...</p>
      ) : filteredCountries.length === 0 ? (
        <p className="text-center">No countries found.</p>
      ) : (
        <motion.div
          className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          {handleSort(filteredCountries).map((country) => (
            <CountryCard key={country.cca3} country={country} />
          ))}
        </motion.div>
      )}
    </div>
  );
};

export default Home;

/* File: ./src\tests\Auth.test.jsx */
/* File: ./src/tests/Auth.test.jsx */
import { render, screen } from '@testing-library/react';
import Auth from '../components/Auth';
import { ThemeProvider } from '../utils/ThemeContext';
import { AuthProvider, useAuth } from '../utils/AuthContext';

vi.mock('../utils/firebase', () => {
  const mockAuth = {
    signOut: vi.fn().mockResolvedValue(undefined),
    onAuthStateChanged: vi.fn((auth, callback) => {
      // Return unsubscribe function immediately
      return vi.fn();
    }),
  };
  return {
    auth: mockAuth,
  };
});

vi.mock('../utils/AuthContext', async () => {
  const actual = await vi.importActual('../utils/AuthContext');
  return {
    ...actual,
    useAuth: vi.fn(() => ({ user: null })), // Default mock value
  };
});

test('renders sign-in button when user is not logged in', () => {
  useAuth.mockReturnValue({ user: null });

  render(
    <ThemeProvider>
      <AuthProvider>
        <Auth />
      </AuthProvider>
    </ThemeProvider>
  );

  expect(screen.getByRole('button', { name: /Sign in/i })).toBeInTheDocument();
});

test('renders user email and sign-out button when user is logged in', () => {
  useAuth.mockReturnValue({ user: { email: 'test@example.com' } });

  render(
    <ThemeProvider>
      <AuthProvider>
        <Auth />
      </AuthProvider>
    </ThemeProvider>
  );

  expect(screen.getByText('test@example.com')).toBeInTheDocument();
  expect(screen.getByRole('button', { name: /Sign out/i })).toBeInTheDocument();
});

/* File: ./src\tests\CountryCard.test.jsx */
import { render, screen } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';
import CountryCard from '../components/CountryCard';
import { ThemeProvider } from '../utils/ThemeContext';

const mockCountry = {
  cca3: 'USA',
  name: { common: 'United States' },
  flags: { png: 'flag.png' },
  population: 331000000,
  region: 'Americas',
  capital: ['Washington, D.C.'],
};

test('renders country card with correct details', () => {
  render(
    <ThemeProvider>
      <MemoryRouter>
        <CountryCard country={mockCountry} />
      </MemoryRouter>
    </ThemeProvider>
  );

  expect(screen.getByText('United States')).toBeInTheDocument();
  expect(screen.getByText(/Population: 331,000,000/)).toBeInTheDocument();
  expect(screen.getByText('Region: Americas')).toBeInTheDocument();
  expect(screen.getByText('Capital: Washington, D.C.')).toBeInTheDocument();
});

/* File: ./src\tests\Home.test.jsx */
import { render, screen, waitFor } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';
import Home from '../pages/Home';
import { fetchAllCountries } from '../utils/api';
import { ThemeProvider } from '../utils/ThemeContext';

// Mock the API module
vi.mock('../utils/api', () => ({
  fetchAllCountries: vi.fn(),
}));

test('renders countries after API call', async () => {
  const mockCountries = [
    {
      cca3: 'USA',
      name: { common: 'United States' },
      flags: { png: 'flag.png' },
      population: 331000000,
      region: 'Americas',
      capital: ['Washington, D.C.'],
    },
  ];

  fetchAllCountries.mockResolvedValue(mockCountries);

  render(
    <ThemeProvider>
      <MemoryRouter>
        <Home />
      </MemoryRouter>
    </ThemeProvider>
  );

  await waitFor(() => {
    expect(screen.getByText('United States')).toBeInTheDocument();
  });
});

/* File: ./src\tests\matchMedia.js */
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: vi.fn().mockImplementation(query => ({
      matches: false,
      media: query,
      onchange: null,
      addListener: vi.fn(), // Deprecated
      removeListener: vi.fn(), // Deprecated
      addEventListener: vi.fn(),
      removeEventListener: vi.fn(),
      dispatchEvent: vi.fn(),
    })),
  });

/* File: ./src\tests\setupTests.js */
import "@testing-library/jest-dom";

/* File: ./src\utils\AuthContext.jsx */
import { createContext, useContext, useEffect, useState } from "react";
import { auth } from "./firebase";
import { onAuthStateChanged } from "firebase/auth";

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
      setLoading(false);
    });
    return () => unsubscribe();
  }, []);

  return (
    <AuthContext.Provider value={{ user, loading }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

/* File: ./src\utils\ThemeContext.jsx */
import { createContext, useContext, useState, useEffect } from "react";

const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState(() => {
    const savedTheme = localStorage.getItem("theme");
    return savedTheme ? savedTheme : window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  });

  useEffect(() => {
    localStorage.setItem("theme", theme);
  }, [theme]);

  const toggleTheme = () => {
    setTheme(theme === "light" ? "dark" : "light");
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => useContext(ThemeContext);

/* File: ./src\utils\api.js */
import axios from "axios";

const API_BASE_URL = "https://restcountries.com/v3.1";

export const fetchAllCountries = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/all`);
    return response.data;
  } catch (error) {
    console.error("Error fetching all countries:", error);
    throw error;
  }
};

export const searchCountriesByName = async (name) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/name/${name}`);
    return response.data;
  } catch (error) {
    console.error("Error searching countries:", error);
    throw error;
  }
};

export const filterCountriesByRegion = async (region) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/region/${region}`);
    return response.data;
  } catch (error) {
    console.error("Error filtering by region:", error);
    throw error;
  }
};

export const fetchCountryByCode = async (code) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/alpha/${code}`);
    return response.data[0];
  } catch (error) {
    console.error("Error fetching country details:", error);
    throw error;
  }
};

/* File: ./src\utils\firebase.js */
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID,
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
